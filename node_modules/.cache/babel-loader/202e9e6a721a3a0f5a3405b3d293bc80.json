{"ast":null,"code":"import*as actionTypes from'./actionTypes';import axios from'axios';export var initState=function initState(){return function(dispatch){dispatch({type:actionTypes.INIT_STATE});};};export var getData=function getData(query,page){return function(dispatch,state){dispatch({type:actionTypes.GET_DATA_LOADING});var url=\"http://hn.algolia.com/api/v1/search?query=\"+query+\"&page=\"+page;axios.get(url).then(function(response){if(response.status===200||response.status===201){dispatch({type:actionTypes.GET_DATA_SUCCESS,data:response.data,query:query});}}).catch(function(error){var errMsg=error;dispatch({type:actionTypes.GET_DATA_ERROR,error:errMsg});});};};","map":{"version":3,"sources":["/Users/himanshukumar/Documents/hiver-assignment/src/pages/Home/Store/action.js"],"names":["actionTypes","axios","initState","dispatch","type","INIT_STATE","getData","query","page","state","GET_DATA_LOADING","url","get","then","response","status","GET_DATA_SUCCESS","data","catch","error","errMsg","GET_DATA_ERROR"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC3B,MAAO,UAAAC,QAAQ,CAAI,CACfA,QAAQ,CAAC,CACLC,IAAI,CAAEJ,WAAW,CAACK,UADb,CAAD,CAAR,CAGH,CAJD,CAKH,CANM,CASP,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAOC,IAAP,QAAgB,UAACL,QAAD,CAAUM,KAAV,CAAoB,CACvDN,QAAQ,CAAC,CACLC,IAAI,CAAEJ,WAAW,CAACU,gBADb,CAAD,CAAR,CAGE,GAAIC,CAAAA,GAAG,CAAG,6CAA+CJ,KAA/C,CAAuD,QAAvD,CAAkEC,IAA5E,CACAP,KAAK,CAACW,GAAN,CAAUD,GAAV,EACGE,IADH,CACQ,SAACC,QAAD,CAAc,CAClB,GAAIA,QAAQ,CAACC,MAAT,GAAoB,GAApB,EAA2BD,QAAQ,CAACC,MAAT,GAAoB,GAAnD,CAAwD,CACtDZ,QAAQ,CAAC,CACPC,IAAI,CAAEJ,WAAW,CAACgB,gBADX,CAEPC,IAAI,CAAEH,QAAQ,CAACG,IAFR,CAGPV,KAAK,CAACA,KAHC,CAAD,CAAR,CAKD,CACF,CATH,EAUGW,KAVH,CAUS,SAACC,KAAD,CAAW,CAChB,GAAIC,CAAAA,MAAM,CAAGD,KAAb,CAEAhB,QAAQ,CAAC,CACPC,IAAI,CAAEJ,WAAW,CAACqB,cADX,CAEPF,KAAK,CAAEC,MAFA,CAAD,CAAR,CAID,CAjBH,EAkBL,CAvBsB,EAAhB","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const initState = () => {\n    return dispatch => {\n        dispatch({\n            type: actionTypes.INIT_STATE\n        })\n    };\n};\n\n\nexport const getData = (query,page) => (dispatch,state) => {\n    dispatch({\n        type: actionTypes.GET_DATA_LOADING,\n      });\n      let url = \"http://hn.algolia.com/api/v1/search?query=\" + query + \"&page=\" + page;\n      axios.get(url)\n        .then((response) => {\n          if (response.status === 200 || response.status === 201) {\n            dispatch({\n              type: actionTypes.GET_DATA_SUCCESS,\n              data: response.data,\n              query:query\n            });\n          }\n        })\n        .catch((error) => {\n          let errMsg = error;\n          \n          dispatch({\n            type: actionTypes.GET_DATA_ERROR,\n            error: errMsg,\n          });\n        });\n};\n"]},"metadata":{},"sourceType":"module"}